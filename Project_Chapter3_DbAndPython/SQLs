# Describe Table articles

    news=# \d articles

                                        Table "public.articles"
    Column |           Type           | Collation | Nullable |               Default                
    --------+--------------------------+-----------+----------+--------------------------------------
    author | integer                  |           | not null | 
    title  | text                     |           | not null | 
    slug   | text                     |           | not null | 
    lead   | text                     |           |          | 
    body   | text                     |           |          | 
    time   | timestamp with time zone |           |          | now()
    id     | integer                  |           | not null | nextval('articles_id_seq'::regclass)
    Indexes:
        "articles_pkey" PRIMARY KEY, btree (id)
        "articles_slug_key" UNIQUE CONSTRAINT, btree (slug)
    Foreign-key constraints:
        "articles_author_fkey" FOREIGN KEY (author) REFERENCES authors(id)


########################################################################################################
# Sample Table articles:

    news=# select * from articles order by id limit 5;

     author |              title               |         slug         |                                                lead                                                 |                                                                                            body                                                                                             |             time              | id 
--------+----------------------------------+----------------------+-----------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------------------------+----
      3 | Bad things gone, say good people | bad-things-gone      | All bad things have gone away, according to a poll of good people Thursday.                         | Bad things are a thing of the bad, bad past. Or so say good people, who were asked by pollsters Thursday whether bad things still are.                                                      | 2016-08-15 14:55:10.814316-04 | 23
      4 | Balloon goons doomed             | balloon-goons-doomed | The doom of balloon goons is true news.                                                             | The goons are doomed, no matter how much their balloons balloon.                                                                                                                            | 2016-08-15 14:55:10.814316-04 | 24
      1 | Bears love berries, alleges bear | bears-love-berries   | Rumors that bears love berries were confirmed by bear, who also proclaims love of salmon and honey. | Bear specified that raspberries were a personal favorite, although wild blackberries remain more abundant throughout the summer and early fall.                                             | 2016-08-15 14:55:10.814316-04 | 25
      2 | Candidate is jerk, alleges rival | candidate-is-jerk    | That political candidate is a real jerk, according to a rival.                                      | The rival alleged egotism, arrogance, and an almost fanatical devotion to media grandstanding. The candidate's campaign denied everything, and retaliated that the rival is a doo-doo head. | 2016-08-15 14:55:10.814316-04 | 26
      1 | Goats eat Google's lawn          | goats-eat-googles    | A herd of goats are eating Google's lawn.                                                           | And the Googlers think it's super cute.                                                                                                                                                     | 2016-08-15 14:55:10.814316-04 | 27
(5 rows)


########################################################################################################
# Count Records in articles:
    
    news=# select count(*) from articles;
    count 
    -------
        8
    (1 row)


#########################################################################################################
# Count Records in authors:

    news=# select count(*) from authors;
    count 
    -------
        4
    (1 row)


#########################################################################################################
# Describe Table log:

    news=# \d log
                                        Table "public.log"
    Column |           Type           | Collation | Nullable |             Default             
    --------+--------------------------+-----------+----------+---------------------------------
    path   | text                     |           |          | 
    ip     | inet                     |           |          | 
    method | text                     |           |          | 
    status | text                     |           |          | 
    time   | timestamp with time zone |           |          | now()
    id     | integer                  |           | not null | nextval('log_id_seq'::regclass)
    Indexes:
        "log_pkey" PRIMARY KEY, btree (id)


#########################################################################################################        
# Sample Table logs:

    news=# select * from log order by id limit 5;
                path              |       ip       | method | status |          time          |   id    
    -------------------------------+----------------+--------+--------+------------------------+---------
    /                             | 198.51.100.195 | GET    | 200 OK | 2016-07-01 03:00:00-04 | 1678923
    /article/candidate-is-jerk    | 198.51.100.195 | GET    | 200 OK | 2016-07-01 03:00:47-04 | 1678924
    /article/goats-eat-googles    | 198.51.100.195 | GET    | 200 OK | 2016-07-01 03:00:34-04 | 1678925
    /article/goats-eat-googles    | 198.51.100.195 | GET    | 200 OK | 2016-07-01 03:00:52-04 | 1678926
    /article/balloon-goons-doomed | 198.51.100.195 | GET    | 200 OK | 2016-07-01 03:00:23-04 | 1678927
    (5 rows)


###########################################################################################################
# Most Popular Articles of All Times. Top 3 Articles:

    news=# SELECT path, COUNT(path) count_views FROM log GROUP BY path ORDER BY count_views DESC LIMIT 3;
                path             | count_views 
    -----------------------------+-------------
    /                           |      479121
    /article/candidate-is-jerk  |      338647
    /article/bears-love-berries |      253801
    (3 rows)

    # The above query shows the full file path, and the top Article is an empty file space. The most accessed page is probably the home directory.
    # On the next query I will remove the "/" and remove the file path.


###########################################################################################################
# Most Popular Articles of All Times. Top 3 Articles ("CLEANED RESULTS"):

    news=# SELECT a.title, top3.count_views FROM (SELECT REVERSE(SPLIT_PART(REVERSE(path), '/', 1)) article, COUNT(path) count_views FROM log WHERE path != '/' GROUP BY article ORDER BY count_views DESC LIMIT 3) top3 LEFT JOIN articles a ON top3.article=a.slug;
    
                title               | count_views 
    ----------------------------------+-------------
    Bad things gone, say good people |      170098
    Bears love berries, alleges bear |      253801
    Candidate is jerk, alleges rival |      338647
    (3 rows)


############################################################################################################
# Most Popular Author of All Time. Top 3 Authors:

    news=# WITH top3 AS (SELECT REVERSE(SPLIT_PART(REVERSE(path), '/', 1)) article, COUNT(path) count_views FROM log WHERE path != '/' GROUP BY article ORDER BY count_views DESC LIMIT 3), aut3 AS (SELECT article, count_views, author FROM top3, articles art WHERE top3.article=art.slug) SELECT name, article, count_views FROM aut3, authors WHERE aut3.author=authors.id order by count_views DESC;
            name          |      article       | count_views 
    ------------------------+--------------------+-------------
    Rudolf von Treppenwitz | candidate-is-jerk  |      338647
    Ursula La Multa        | bears-love-berries |      253801
    Anonymous Contributor  | bad-things-gone    |      170098
    (3 rows)

    # On the above query had to do several joins, from the top3 articles from log Table, to the articles and finally to the authors table to obtain the Author's name.


###########################################################################################################
# Which Day had more than 1% Error:

    # Describe log Table:

        news=# \d log
                                            Table "public.log"
        Column |           Type           | Collation | Nullable |             Default             
        --------+--------------------------+-----------+----------+---------------------------------
        path   | text                     |           |          | 
        ip     | inet                     |           |          | 
        method | text                     |           |          | 
        status | text                     |           |          | 
        time   | timestamp with time zone |           |          | now()
        id     | integer                  |           | not null | nextval('log_id_seq'::regclass)
        Indexes:
            "log_pkey" PRIMARY KEY, btree (id)

    
    # Sample Errors on log Table:

        news=# select distinct(status) from log;
            status     
        ---------------
        200 OK
        404 NOT FOUND
        (2 rows)


    # Test query to pull date from timestamp

        news=# SELECT *, time::TIMESTAMP::DATE from log order by id limit 3;
                    path            |       ip       | method | status |          time          |   id    |    time    
        ----------------------------+----------------+--------+--------+------------------------+---------+------------
        /                          | 198.51.100.195 | GET    | 200 OK | 2016-07-01 03:00:00-04 | 1678923 | 2016-07-01
        /article/candidate-is-jerk | 198.51.100.195 | GET    | 200 OK | 2016-07-01 03:00:47-04 | 1678924 | 2016-07-01
        /article/goats-eat-googles | 198.51.100.195 | GET    | 200 OK | 2016-07-01 03:00:34-04 | 1678925 | 2016-07-01
        (3 rows)

        # reference: https://tableplus.io/blog/2018/07/postgresql-how-to-extract-date-from-timestamp.html

    
    # Counts '404 NOT FOUND' Errors:

            news=# SELECT time::TIMESTAMP::DATE as date, COUNT(status) count_err FROM log WHERE status='404 NOT FOUND' GROUP BY time::TIMESTAMP::DATE;
                date    | count_err 
            ------------+-----------
            2016-07-03 |       393
            2016-07-08 |       418
            2016-07-15 |       391
            2016-07-11 |       409
            2016-07-23 |       361
            2016-07-13 |       387
            2016-07-01 |       342
            2016-07-05 |       417
            2016-07-20 |       389
            2016-07-22 |       417
            2016-07-07 |       365
            2016-07-04 |       392
            2016-07-12 |       371
            2016-07-18 |       390
            2016-07-06 |       412
            2016-07-09 |       412
            2016-07-25 |       391
            2016-07-10 |       374
            2016-07-31 |       261
            2016-07-27 |       381
            2016-07-21 |       404
            2016-07-14 |       390
            2016-07-28 |       385
            2016-07-30 |       396
            2016-07-16 |       367
            2016-07-19 |       420
            2016-07-26 |       402
            2016-07-29 |       384
            2016-07-24 |       428
            2016-07-17 |      1272
            2016-07-02 |       387
            (31 rows)

            # Apply similar query for Total status counts:
            SELECT time::TIMESTAMP::DATE as date, COUNT(status) total_err FROM log GROUP BY time::TIMESTAMP::DATE;

    
    # Query to Check Division count_err / total_err:

        news=# WITH err AS (SELECT time::TIMESTAMP::DATE as date, COUNT(status) count_err FROM log WHERE status='404 NOT FOUND' GROUP BY time::TIMESTAMP::DATE),
        news-#             total AS (SELECT time::TIMESTAMP::DATE as date, COUNT(status) total_err FROM log GROUP BY time::TIMESTAMP::DATE)
        news-#             SELECT total.date, count_err, total_err, ROUND((count_err::decimal/total_err::decimal)*100, 1) as Perc_Error FROM err, total WHERE err.date=total.date;
            date    | count_err | total_err | perc_error 
        ------------+-----------+-----------+------------
        2016-07-01 |       342 |     47857 |        0.7
        2016-07-02 |       387 |     55213 |        0.7
        2016-07-03 |       393 |     54831 |        0.7
        2016-07-04 |       392 |     54744 |        0.7
        2016-07-05 |       417 |     54740 |        0.8
        2016-07-06 |       412 |     54858 |        0.8
        2016-07-07 |       365 |     54738 |        0.7
        2016-07-08 |       418 |     55085 |        0.8
        2016-07-09 |       412 |     55069 |        0.7
        2016-07-10 |       374 |     54539 |        0.7
        2016-07-11 |       409 |     54365 |        0.8
        2016-07-12 |       371 |     55180 |        0.7
        2016-07-13 |       387 |     55011 |        0.7
        2016-07-14 |       390 |     55303 |        0.7
        2016-07-15 |       391 |     54781 |        0.7
        2016-07-16 |       367 |     54650 |        0.7
        2016-07-17 |      1272 |     55779 |        2.3
        2016-07-18 |       390 |     55690 |        0.7
        2016-07-19 |       420 |     55282 |        0.8
        2016-07-20 |       389 |     54695 |        0.7
        2016-07-21 |       404 |     55194 |        0.7
        2016-07-22 |       417 |     55029 |        0.8
        2016-07-23 |       361 |     54884 |        0.7
        2016-07-24 |       428 |     55065 |        0.8
        2016-07-25 |       391 |     54657 |        0.7
        2016-07-26 |       402 |     54433 |        0.7
        2016-07-27 |       381 |     54460 |        0.7
        2016-07-28 |       385 |     55059 |        0.7
        2016-07-29 |       384 |     54890 |        0.7
        2016-07-30 |       396 |     55056 |        0.7
        2016-07-31 |       261 |     36598 |        0.7
        (31 rows)

        # Initially query was not performing the division, due to typecast. Added ::decimal to Error and Total Counts.
        # reference: https://stackoverflow.com/questions/34504497/division-not-giving-my-answer-in-postgresql


    # Now query to get the days that the Error is above 1%:

        news=# WITH err AS (SELECT time::TIMESTAMP::DATE as date, COUNT(status) count_err FROM log WHERE status='404 NOT FOUND' GROUP BY time::TIMESTAMP::DATE),
        news-#         total AS (SELECT time::TIMESTAMP::DATE as date, COUNT(status) total_err FROM log GROUP BY time::TIMESTAMP::DATE)
        news-#         SELECT total.date, count_err, total_err, ROUND((count_err::decimal/total_err::decimal)*100, 1) as perc_error FROM err, total WHERE err.date=total.date AND ROUND((count_err::decimal/total_err::decimal)*100, 1) > 1;
            
            date    | count_err | total_err | perc_error 
        ------------+-----------+-----------+------------
        2016-07-17 |      1272 |     55779 |        2.3
        (1 row)



###################################################################################################################
# Create Views:

    # Top 3 Articles:

        CREATE VIEW top3artic AS SELECT a.title, top3.count_views FROM (SELECT REVERSE(SPLIT_PART(REVERSE(path), '/', 1)) 
        article, COUNT(path) count_views FROM log WHERE path != '/' GROUP BY article ORDER BY count_views DESC LIMIT 3) 
        top3 LEFT JOIN articles a ON top3.article=a.slug;

        # Test View works:

            news=# SELECT * FROM top3artic;

                        title               | count_views 
            ----------------------------------+-------------
            Bad things gone, say good people |      170098
            Bears love berries, alleges bear |      253801
            Candidate is jerk, alleges rival |      338647
            (3 rows)


    # Top 3 Aurthors:

        CREATE VIEW pop3auth AS
        WITH top3 AS (SELECT REVERSE(SPLIT_PART(REVERSE(path), '/', 1)) article, COUNT(path) count_views FROM log WHERE path != '/' 
        GROUP BY article ORDER BY count_views DESC LIMIT 3), aut3 AS (SELECT article, count_views, author FROM top3, articles art WHERE top3.article=art.slug) 
        SELECT name, article, count_views FROM aut3, authors WHERE aut3.author=authors.id order by count_views DESC;

        # Test View works:

            news=# SELECT * FROM pop3auth;
                    name          |      article       | count_views 
            ------------------------+--------------------+-------------
            Rudolf von Treppenwitz | candidate-is-jerk  |      338647
            Ursula La Multa        | bears-love-berries |      253801
            Anonymous Contributor  | bad-things-gone    |      170098
            (3 rows)


    # Days with Error ("400 NOT FOUND") Above 1%:

        CREATE VIEW dayError1Perc AS
        WITH err AS (SELECT time::TIMESTAMP::DATE as date, COUNT(status) count_err FROM log WHERE status='404 NOT FOUND' GROUP BY time::TIMESTAMP::DATE),
        total AS (SELECT time::TIMESTAMP::DATE as date, COUNT(status) total_err FROM log GROUP BY time::TIMESTAMP::DATE)
        SELECT total.date, count_err, total_err, ROUND((count_err::decimal/total_err::decimal)*100, 1) as perc_error 
        FROM err, total WHERE err.date=total.date AND ROUND((count_err::decimal/total_err::decimal)*100, 1) > 1;

        # Test View works:

            news=# SELECT * FROM dayError1Perc;
                date    | count_err | total_err | perc_error 
            ------------+-----------+-----------+------------
            2016-07-17 |      1272 |     55779 |        2.3
            (1 row)